# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account implements Node {
  access_token: String
  expires_at: Int
  id: ID!
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_secret: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: User!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_secret: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_secret: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  oauth_token: StringNullableFilter
  oauth_token_secret: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_secret: StringNullableFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

enum AlgorithmType {
  ES256
  ES256K
  ES384
  ES512
  Ed448
  Ed25519
  HS256
  HS384
  HS512
  None
  PS256
  PS384
  PS512
  RS256
  RS384
  RS512
}

type Auth {
  """
  JWT access token
  """
  accessToken: String!

  """
  JWT refresh token
  """
  refreshToken: String!
  session: Session
  user: User!
}

type AuthDetailed {
  auth: Auth
  jwt: JwtDecoded
}

type BaseTypeNodes {
  nodes: [TypesUnion!]!
  pageInfo: PageInfo
  totalCount: Int!
}

type BaseTypesEdge {
  cursor: String!
  node: TypesUnion!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category implements Node {
  _count: CategoryCount!
  createdAt: DateTime
  creator: User!
  creatorId: String!
  entries: [Entry!]
  entryId: String
  id: ID!
  name: String!
  updatedAt: DateTime
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CategoryCount {
  entries: Int!
}

input CategoryCreateManyCreatorInput {
  createdAt: DateTime
  entryId: String
  id: String
  name: String!
  updatedAt: DateTime
}

input CategoryCreateManyCreatorInputEnvelope {
  data: [CategoryCreateManyCreatorInput!]!
  skipDuplicates: Boolean
}

input CategoryCreateNestedManyWithoutCreatorInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutCreatorInput!]
  create: [CategoryCreateWithoutCreatorInput!]
  createMany: CategoryCreateManyCreatorInputEnvelope
}

input CategoryCreateNestedManyWithoutEntriesInput {
  connect: [CategoryWhereUniqueInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutEntriesInput!]
  create: [CategoryCreateWithoutEntriesInput!]
}

input CategoryCreateOrConnectWithoutCreatorInput {
  create: CategoryCreateWithoutCreatorInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutEntriesInput {
  create: CategoryCreateWithoutEntriesInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutCreatorInput {
  createdAt: DateTime
  entries: EntryCreateNestedManyWithoutCategoriesInput
  entryId: String
  id: String
  name: String!
  updatedAt: DateTime
}

input CategoryCreateWithoutEntriesInput {
  createdAt: DateTime
  creator: UserCreateNestedOneWithoutCategoriesInput
  entryId: String
  id: String
  name: String!
  updatedAt: DateTime
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CategoryOrderByRelevanceFieldEnum {
  creatorId
  entryId
  id
  name
}

input CategoryOrderByRelevanceInput {
  fields: [CategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CategoryOrderByWithRelationAndSearchRelevanceInput {
  _relevance: CategoryOrderByRelevanceInput
  createdAt: SortOrder
  creator: UserOrderByWithRelationAndSearchRelevanceInput
  creatorId: SortOrder
  entries: EntryOrderByRelationAggregateInput
  entryId: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum CategoryScalarFieldEnum {
  createdAt
  creatorId
  entryId
  id
  name
  updatedAt
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeNullableFilter
  creator: UserRelationFilter
  creatorId: StringNullableFilter
  entries: EntryListRelationFilter
  entryId: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeNullableFilter
}

input CategoryWhereUniqueInput {
  id: String
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Comment implements Node {
  author: User!
  authorId: String
  body: String
  createdAt: DateTime!
  entry: Entry!
  entryId: String
  id: ID!
  position: String
  reactions: [CommentReactions!]
  updatedAt: DateTime
}

input CommentAuthorIdEntryIdCompoundUniqueInput {
  authorId: String!
  entryId: String!
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CommentCreateManyAuthorInput {
  body: String
  createdAt: DateTime
  entryId: String
  id: String
  position: String
  reactions: CommentCreateManyreactionsInput
  updatedAt: DateTime
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyEntryInput {
  authorId: String
  body: String
  createdAt: DateTime
  id: String
  position: String
  reactions: CommentCreateManyreactionsInput
  updatedAt: DateTime
}

input CommentCreateManyEntryInputEnvelope {
  data: [CommentCreateManyEntryInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyreactionsInput {
  set: [CommentReactions!]!
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutEntryInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutEntryInput!]
  create: [CommentCreateWithoutEntryInput!]
  createMany: CommentCreateManyEntryInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutEntryInput {
  create: CommentCreateWithoutEntryInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  body: String
  createdAt: DateTime
  entry: EntryCreateNestedOneWithoutCommentsInput
  id: String
  position: String
  reactions: CommentCreatereactionsInput
  updatedAt: DateTime
}

input CommentCreateWithoutEntryInput {
  author: UserCreateNestedOneWithoutCommentsInput
  body: String
  createdAt: DateTime
  id: String
  position: String
  reactions: CommentCreatereactionsInput
  updatedAt: DateTime
}

input CommentCreatereactionsInput {
  set: [CommentReactions!]!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CommentOrderByRelevanceFieldEnum {
  authorId
  body
  entryId
  id
  position
}

input CommentOrderByRelevanceInput {
  fields: [CommentOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CommentOrderByWithRelationAndSearchRelevanceInput {
  _relevance: CommentOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  body: SortOrder
  createdAt: SortOrder
  entry: EntryOrderByWithRelationAndSearchRelevanceInput
  entryId: SortOrder
  id: SortOrder
  position: SortOrder
  reactions: SortOrder
  updatedAt: SortOrder
}

enum CommentReactions {
  ANGRY
  CARE
  CONFUSED
  DISLIKE
  LAUGH
  LIKE
  LOVE
  PARROT
  ROCKET
  TEARS
  WOW
}

enum CommentScalarFieldEnum {
  authorId
  body
  createdAt
  entryId
  id
  position
  reactions
  updatedAt
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  body: StringNullableFilter
  createdAt: DateTimeFilter
  entry: EntryRelationFilter
  entryId: StringNullableFilter
  id: StringFilter
  position: StringNullableFilter
  reactions: EnumCommentReactionsNullableListFilter
  updatedAt: DateTimeNullableFilter
}

input CommentWhereUniqueInput {
  authorId_entryId: CommentAuthorIdEntryIdCompoundUniqueInput
  id: String
}

type Connection implements Node {
  email: String!
  firstName: String
  id: ID!
  ip: String
  lastModified: DateTime
  lastName: String
  owner: User!
  ownerId: String
  phoneNumber: PhoneNumber
}

type ConnectionConnection {
  edges: [ConnectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ConnectionCreateManyOwnerInput {
  email: String!
  firstName: String
  id: String
  ip: String
  lastModified: DateTime
  lastName: String
  phoneNumber: String
}

input ConnectionCreateManyOwnerInputEnvelope {
  data: [ConnectionCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input ConnectionCreateNestedManyWithoutOwnerInput {
  connect: [ConnectionWhereUniqueInput!]
  connectOrCreate: [ConnectionCreateOrConnectWithoutOwnerInput!]
  create: [ConnectionCreateWithoutOwnerInput!]
  createMany: ConnectionCreateManyOwnerInputEnvelope
}

input ConnectionCreateOrConnectWithoutOwnerInput {
  create: ConnectionCreateWithoutOwnerInput!
  where: ConnectionWhereUniqueInput!
}

input ConnectionCreateWithoutOwnerInput {
  email: String!
  firstName: String
  id: String
  ip: String
  lastModified: DateTime
  lastName: String
  phoneNumber: String
}

type ConnectionEdge {
  cursor: String!
  node: Connection!
}

input ConnectionListRelationFilter {
  every: ConnectionWhereInput
  none: ConnectionWhereInput
  some: ConnectionWhereInput
}

input ConnectionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ConnectionOrderByRelevanceFieldEnum {
  email
  firstName
  id
  ip
  lastName
  ownerId
  phoneNumber
}

input ConnectionOrderByRelevanceInput {
  fields: [ConnectionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ConnectionOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ConnectionOrderByRelevanceInput
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  ip: SortOrder
  lastModified: SortOrder
  lastName: SortOrder
  owner: UserOrderByWithRelationAndSearchRelevanceInput
  ownerId: SortOrder
  phoneNumber: SortOrder
}

enum ConnectionScalarFieldEnum {
  email
  firstName
  id
  ip
  lastModified
  lastName
  ownerId
  phoneNumber
}

input ConnectionWhereInput {
  AND: [ConnectionWhereInput!]
  NOT: [ConnectionWhereInput!]
  OR: [ConnectionWhereInput!]
  email: StringFilter
  firstName: StringNullableFilter
  id: StringFilter
  ip: StringNullableFilter
  lastModified: DateTimeNullableFilter
  lastName: StringNullableFilter
  owner: UserRelationFilter
  ownerId: StringNullableFilter
  phoneNumber: StringNullableFilter
}

input ConnectionWhereUniqueInput {
  id: String
}

type ContentNodes {
  contentNodes: BaseTypeNodes!
}

input CreatNewCommentInput {
  body: String!
  entryId: String!
  position: String!
  reactions: [CommentReactions!]!
}

input CreateNewProfileInput {
  bio: String
  city: String
  country: String
  coverPhoto: String
  dob: String
  gender: Gender
  occupation: String
  phoneNumber: String
  pronouns: Pronouns
}

input CreateOneProfile {
  data: CreateNewProfileInput!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Entry implements Node {
  _count: EntryCount!
  author: User!
  authorId: String
  categories: [Category!]
  categoryId: String
  comments: [Comment!]
  content: String
  createdAt: DateTime!
  featuredImage: String
  id: ID!
  published: Boolean
  title: String
  updatedAt: DateTime
}

type EntryConnection {
  edges: [EntryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EntryCount {
  categories: Int!
  comments: Int!
}

input EntryCreateManyAuthorInput {
  categoryId: String
  content: String
  createdAt: DateTime
  featuredImage: String
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input EntryCreateManyAuthorInputEnvelope {
  data: [EntryCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input EntryCreateNestedManyWithoutAuthorInput {
  connect: [EntryWhereUniqueInput!]
  connectOrCreate: [EntryCreateOrConnectWithoutAuthorInput!]
  create: [EntryCreateWithoutAuthorInput!]
  createMany: EntryCreateManyAuthorInputEnvelope
}

input EntryCreateNestedManyWithoutCategoriesInput {
  connect: [EntryWhereUniqueInput!]
  connectOrCreate: [EntryCreateOrConnectWithoutCategoriesInput!]
  create: [EntryCreateWithoutCategoriesInput!]
}

input EntryCreateNestedOneWithoutCommentsInput {
  connect: EntryWhereUniqueInput
  connectOrCreate: EntryCreateOrConnectWithoutCommentsInput
  create: EntryCreateWithoutCommentsInput
}

input EntryCreateOneInput {
  author: UserCreateNestedOneWithoutEntriesInput!
  categories: CategoryCreateNestedManyWithoutEntriesInput
  categoryId: String
  content: String
  createdAt: DateTime
  featuredImage: String
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input EntryCreateOrConnectWithoutAuthorInput {
  create: EntryCreateWithoutAuthorInput!
  where: EntryWhereUniqueInput!
}

input EntryCreateOrConnectWithoutCategoriesInput {
  create: EntryCreateWithoutCategoriesInput!
  where: EntryWhereUniqueInput!
}

input EntryCreateOrConnectWithoutCommentsInput {
  create: EntryCreateWithoutCommentsInput!
  where: EntryWhereUniqueInput!
}

input EntryCreateWithoutAuthorInput {
  categories: CategoryCreateNestedManyWithoutEntriesInput
  categoryId: String
  comments: CommentCreateNestedManyWithoutEntryInput
  content: String
  createdAt: DateTime
  featuredImage: String
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input EntryCreateWithoutCategoriesInput {
  author: UserCreateNestedOneWithoutEntriesInput
  categoryId: String
  comments: CommentCreateNestedManyWithoutEntryInput
  content: String
  createdAt: DateTime
  featuredImage: String
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input EntryCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutEntriesInput
  categories: CategoryCreateNestedManyWithoutEntriesInput
  categoryId: String
  content: String
  createdAt: DateTime
  featuredImage: String
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

type EntryEdge {
  cursor: String!
  node: Entry!
}

input EntryListRelationFilter {
  every: EntryWhereInput
  none: EntryWhereInput
  some: EntryWhereInput
}

input EntryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum EntryOrderByRelevanceFieldEnum {
  authorId
  categoryId
  content
  featuredImage
  id
  title
}

input EntryOrderByRelevanceInput {
  fields: [EntryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input EntryOrderByWithRelationAndSearchRelevanceInput {
  _relevance: EntryOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  categories: CategoryOrderByRelationAggregateInput
  categoryId: SortOrder
  comments: CommentOrderByRelationAggregateInput
  content: SortOrder
  createdAt: SortOrder
  featuredImage: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input EntryRelationFilter {
  is: EntryWhereInput
  isNot: EntryWhereInput
}

enum EntryScalarFieldEnum {
  authorId
  categoryId
  content
  createdAt
  featuredImage
  id
  published
  title
  updatedAt
}

input EntryWhereInput {
  AND: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  categories: CategoryListRelationFilter
  categoryId: StringNullableFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  featuredImage: StringNullableFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
}

input EntryWhereUniqueInput {
  id: String
}

input EnumCommentReactionsNullableListFilter {
  equals: [CommentReactions!]
  has: CommentReactions
  hasEvery: [CommentReactions!]
  hasSome: [CommentReactions!]
  isEmpty: Boolean
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input EnumMediaItemDestinationNullableFilter {
  equals: MediaItemDestination
  in: [MediaItemDestination!]
  not: NestedEnumMediaItemDestinationNullableFilter
  notIn: [MediaItemDestination!]
}

input EnumMimeTypesNullableFilter {
  equals: MimeTypes
  in: [MimeTypes!]
  not: NestedEnumMimeTypesNullableFilter
  notIn: [MimeTypes!]
}

input EnumPronounsNullableFilter {
  equals: Pronouns
  in: [Pronouns!]
  not: NestedEnumPronounsNullableFilter
  notIn: [Pronouns!]
}

input EnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleNullableFilter
  notIn: [Role!]
}

input EnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

input FindManyCategoriesPaginatedInput {
  cursor: CategoryWhereUniqueInput
  distinct: [CategoryScalarFieldEnum!]
  orderBy: [CategoryOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: CategoryWhereInput
}

input FindManyCommentsPaginatedInput {
  cursor: CommentWhereUniqueInput
  distinct: [CommentScalarFieldEnum!]
  orderBy: [CommentOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: CommentWhereInput
}

input FindManyConnectionsPaginatedInput {
  cursor: ConnectionWhereUniqueInput
  distinct: [ConnectionScalarFieldEnum!]
  orderBy: [ConnectionOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: ConnectionWhereInput
}

input FindManyEntriessPaginatedInput {
  cursor: EntryWhereUniqueInput
  distinct: [EntryScalarFieldEnum!]
  orderBy: [EntryOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: EntryWhereInput
}

input FindManyMediaItemsPaginatedInput {
  cursor: MediaItemWhereUniqueInput
  distinct: [MediaItemScalarFieldEnum!]
  orderBy: [MediaItemOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput = { first: 10 }
  skip: Int
  take: Int
  where: MediaItemWhereInput
}

input FindManyProfilesPaginatedInput {
  cursor: ProfileWhereUniqueInput
  distinct: [ProfileScalarFieldEnum!]
  orderBy: [ProfileOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: ProfileWhereInput
}

input FindManySessionsPaginatedInput {
  cursor: SessionWhereUniqueInput
  distinct: [SessionScalarFieldEnum!]
  orderBy: [SessionOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  where: SessionWhereInput
}

input FindManyUsersPaginatedInput {
  cursor: UserWhereUniqueInput
  distinct: [UserScalarFieldEnum!]
  orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!]!
  pagination: PaginationArgsInput = { first: 10 }
  skip: Int
  take: Int
  where: UserWhereInput
}

input FindViewerEntriesPaginatedInput {
  cursor: EntryWhereUniqueInput
  distinct: [EntryScalarFieldEnum!]
  orderBy: [EntryOrderByWithRelationAndSearchRelevanceInput!]
  pagination: PaginationArgsInput!
  skip: Int
  take: Int
  unique: EntryWhereUniqueInput
  where: ViewerEntriesWhereInput
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

enum Gender {
  FEMALE
  MALE
  OTHER
  UNCERTAIN
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type JwtDecoded {
  header: JwtHeaders!
  payload: JwtPayload!
  signature: String!
}

type JwtHeaders {
  alg: AlgorithmType!
  typ: String!
}

type JwtPayload {
  exp: BigInt
  iat: BigInt
  userId: String
}

input LoginInput {
  email: String
  password: String
}

type MediaItem implements Node {
  fileLastModified: DateTime
  height: Float
  id: ID!
  name: String
  quality: Int
  size: String
  src: String
  srcSet: String
  type: MimeTypes
  updatedAt: DateTime
  uploadedAt: DateTime!
  user: User!
  userId: String
  width: Float
}

type MediaItemConnection {
  edges: [MediaItemEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input MediaItemCreateManyUserInput {
  ariaLabel: String
  caption: String
  destination: MediaItemDestination
  fileLastModified: DateTime
  height: Float
  id: String
  name: String
  quality: Int
  size: String
  src: String
  srcSet: String
  title: String
  type: MimeTypes
  updatedAt: DateTime
  uploadedAt: DateTime
  width: Float
}

input MediaItemCreateManyUserInputEnvelope {
  data: [MediaItemCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MediaItemCreateNestedManyWithoutUserInput {
  connect: [MediaItemWhereUniqueInput!]
  connectOrCreate: [MediaItemCreateOrConnectWithoutUserInput!]
  create: [MediaItemCreateWithoutUserInput!]
  createMany: MediaItemCreateManyUserInputEnvelope
}

input MediaItemCreateOrConnectWithoutUserInput {
  create: MediaItemCreateWithoutUserInput!
  where: MediaItemWhereUniqueInput!
}

input MediaItemCreateWithoutUserInput {
  ariaLabel: String
  caption: String
  destination: MediaItemDestination
  fileLastModified: DateTime
  height: Float
  id: String
  name: String
  quality: Int
  size: String
  src: String
  srcSet: String
  title: String
  type: MimeTypes
  updatedAt: DateTime
  uploadedAt: DateTime
  width: Float
}

enum MediaItemDestination {
  AVATAR
  COMMENT_ATTACHMENT
  COVER_IMAGE
  ENTRY_ATTACHMENT
  FEATURED_IMAGE
}

type MediaItemEdge {
  cursor: String!
  node: MediaItem!
}

input MediaItemListRelationFilter {
  every: MediaItemWhereInput
  none: MediaItemWhereInput
  some: MediaItemWhereInput
}

input MediaItemNameUserIdCompoundUniqueInput {
  name: String!
  userId: String!
}

input MediaItemOrderByRelationAggregateInput {
  _count: SortOrder
}

enum MediaItemOrderByRelevanceFieldEnum {
  ariaLabel
  caption
  id
  name
  size
  src
  srcSet
  title
  userId
}

input MediaItemOrderByRelevanceInput {
  fields: [MediaItemOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input MediaItemOrderByWithRelationAndSearchRelevanceInput {
  _relevance: MediaItemOrderByRelevanceInput
  ariaLabel: SortOrder
  caption: SortOrder
  destination: SortOrder
  fileLastModified: SortOrder
  height: SortOrder
  id: SortOrder
  name: SortOrder
  quality: SortOrder
  size: SortOrder
  src: SortOrder
  srcSet: SortOrder
  title: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uploadedAt: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
  width: SortOrder
}

enum MediaItemScalarFieldEnum {
  ariaLabel
  caption
  destination
  fileLastModified
  height
  id
  name
  quality
  size
  src
  srcSet
  title
  type
  updatedAt
  uploadedAt
  userId
  width
}

input MediaItemWhereInput {
  AND: [MediaItemWhereInput!]
  NOT: [MediaItemWhereInput!]
  OR: [MediaItemWhereInput!]
  ariaLabel: StringNullableFilter
  caption: StringNullableFilter
  destination: EnumMediaItemDestinationNullableFilter
  fileLastModified: DateTimeNullableFilter
  height: FloatNullableFilter
  id: StringFilter
  name: StringNullableFilter
  quality: IntNullableFilter
  size: StringNullableFilter
  src: StringNullableFilter
  srcSet: StringNullableFilter
  title: StringNullableFilter
  type: EnumMimeTypesNullableFilter
  updatedAt: DateTimeNullableFilter
  uploadedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringNullableFilter
  width: FloatNullableFilter
}

input MediaItemWhereUniqueInput {
  id: String
  name_userId: MediaItemNameUserIdCompoundUniqueInput
}

enum MimeTypes {
  AVIF
  BMP
  GIF
  JPEG
  PNG
  SVG
  TIFF
  WEBP
}

type Mutation {
  changePassword(changePasswordInput: ChangePasswordInput!): User!
  createEntryWithAxios(createNew: EntryCreateOneInput!): Entry!
  createNewComment(commentCreateInput: CreatNewCommentInput!): Comment!
  createNewEntry(entryCreateInput: EntryCreateOneInput!): Entry!
  createNewProfile(createNewProfileInput: CreateOneProfile!): Profile!
  nuevoEntry(nuevoEntry: EntryCreateOneInput!): Entry!
  registerNewUser(userCreateInput: SignupInput!): AuthDetailed!
  signin(userloginInput: LoginInput!): AuthDetailed!
  updateUserPassword(passwordInput: ChangePasswordInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input NestedEnumMediaItemDestinationNullableFilter {
  equals: MediaItemDestination
  in: [MediaItemDestination!]
  not: NestedEnumMediaItemDestinationNullableFilter
  notIn: [MediaItemDestination!]
}

input NestedEnumMimeTypesNullableFilter {
  equals: MimeTypes
  in: [MimeTypes!]
  not: NestedEnumMimeTypesNullableFilter
  notIn: [MimeTypes!]
}

input NestedEnumPronounsNullableFilter {
  equals: Pronouns
  in: [Pronouns!]
  not: NestedEnumPronounsNullableFilter
  notIn: [Pronouns!]
}

input NestedEnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleNullableFilter
  notIn: [Role!]
}

input NestedEnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

interface Node {
  id: ID!
}

union NodeBaseFieldUnion =
    Account
  | Category
  | Comment
  | Connection
  | Entry
  | MediaItem
  | Profile
  | Session
  | User

union NodeUnion =
    CommentConnection
  | EntryConnection
  | MediaItemConnection
  | ProfileConnection
  | SessionConnection
  | UserConnection

type NodeUnionConnection {
  edges: [NodeUnionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeUnionEdge {
  cursor: String!
  node: NodeUnion!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationArgsInput {
  after: String = null
  before: String = null
  first: Int = 10
  last: Int = null
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Profile implements Node {
  activiyFeed: String
  bio: String
  city: String
  country: String
  coverPhoto: String
  dob: String
  gender: Gender
  id: ID!
  lastSeen: DateTime
  memberSince: DateTime!
  occupation: String
  phoneNumber: String
  pronouns: Pronouns
  recentActivity: String
  user: User!
  userId: String
  userInProfile: User!
}

type ProfileConnection {
  edges: [ProfileEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  activiyFeed: String
  bio: String
  city: String
  country: String
  coverPhoto: String
  dob: String
  gender: Gender
  id: String
  lastSeen: DateTime
  memberSince: DateTime
  occupation: String
  phoneNumber: String
  pronouns: Pronouns
  recentActivity: String
}

type ProfileEdge {
  cursor: String!
  node: Profile!
}

enum ProfileOrderByRelevanceFieldEnum {
  activiyFeed
  bio
  city
  country
  coverPhoto
  dob
  id
  occupation
  phoneNumber
  recentActivity
  userId
}

input ProfileOrderByRelevanceInput {
  fields: [ProfileOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ProfileOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ProfileOrderByRelevanceInput
  activiyFeed: SortOrder
  bio: SortOrder
  city: SortOrder
  country: SortOrder
  coverPhoto: SortOrder
  dob: SortOrder
  gender: SortOrder
  id: SortOrder
  lastSeen: SortOrder
  memberSince: SortOrder
  occupation: SortOrder
  phoneNumber: SortOrder
  pronouns: SortOrder
  recentActivity: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

enum ProfileScalarFieldEnum {
  activiyFeed
  bio
  city
  country
  coverPhoto
  dob
  gender
  id
  lastSeen
  memberSince
  occupation
  phoneNumber
  pronouns
  recentActivity
  userId
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  activiyFeed: StringNullableFilter
  bio: StringNullableFilter
  city: StringNullableFilter
  country: StringNullableFilter
  coverPhoto: StringNullableFilter
  dob: StringNullableFilter
  gender: EnumGenderNullableFilter
  id: StringFilter
  lastSeen: DateTimeNullableFilter
  memberSince: DateTimeFilter
  occupation: StringNullableFilter
  phoneNumber: StringNullableFilter
  pronouns: EnumPronounsNullableFilter
  recentActivity: StringNullableFilter
  user: UserRelationFilter
  userId: StringNullableFilter
}

input ProfileWhereUniqueInput {
  id: String
  userId: String
}

enum Pronouns {
  HE_HIM_HIS
  NOT_LISTED
  PREFER_NOT_TO_SAY
  SHE_HER_HERS
  THEY_THEM_THEIRS
}

type Query {
  categoryByRelayId(cursor: String!): Category!
  commentByRelayId(cursor: String!): Comment!
  comprehensiveConnectionUnion: [NodeUnion!]!
  connectionByRelayId(connectionCursor: String!): Connection!
  contentNodesUnion(
    findManyEntriesPaginatedInput: FindManyEntriessPaginatedInput!
    findManyMediaItemsPaginated: FindManyMediaItemsPaginatedInput
    findManyUsersPaginatedInput: FindManyUsersPaginatedInput
  ): ContentNodes!
  entryById(id: String!): Entry!
  entryByRelayId(entryCursor: String!): Entry!
  findUniqueMediaItem(mediaItemId: String!): MediaItem!
  getUserFromAccessToken(token: String!): AuthDetailed!
  getViewer: AuthDetailed!
  listCategories(
    findManyCategoriesPaginatedInput: FindManyCategoriesPaginatedInput!
  ): CategoryConnection!
  listComments(
    findManyCommentsPaginatedInput: FindManyCommentsPaginatedInput!
  ): CommentConnection!
  listConnections(
    findManyConnectionsPaginatedInput: FindManyConnectionsPaginatedInput!
  ): ConnectionConnection!
  listEntries(
    findManyEntriesPaginatedInput: FindManyEntriessPaginatedInput!
  ): EntryConnection!
  listMediaItems(
    findManyMediaItemsPaginated: FindManyMediaItemsPaginatedInput
  ): MediaItemConnection!
  listProfiles(
    profilesArgs: FindManyProfilesPaginatedInput!
  ): ProfileConnection!
  listSessions(
    findManySessionsPaginatedInput: FindManySessionsPaginatedInput!
  ): SessionConnection!
  listUsers(
    findManyUsersPaginatedInput: FindManyUsersPaginatedInput = {}
  ): UserConnection!
  me: AuthDetailed!
  node(id: ID!): Node
  nodeField(cursor: String!): [NodeBaseFieldUnion!]!
  nodeUnionResolver(
    id: String!
    manyComments: FindManyCommentsPaginatedInput!
    manyEntries: FindManyEntriessPaginatedInput!
    manyMediaItems: FindManyMediaItemsPaginatedInput!
    manyProfiles: FindManyProfilesPaginatedInput!
    manySessions: FindManySessionsPaginatedInput!
    manyUsers: FindManyUsersPaginatedInput!
  ): NodeUnionConnection!
  profileByRelayId(cursor: String!): Profile!
  sessionByRelayId(cursor: String!): Session!
  siftEntries(
    entryFindManyInput: FindManyEntriessPaginatedInput!
  ): EntryConnection!
  userById(id: String!): User!
  userByRelayId(cursor: String!): User!
  viewer: ViewerDetailed!
  viewerAuthInfoFromContext: ViewerAuthInfo!
  viewerCommentsPaginated(
    viewerCommentsPaginatedInput: FindManyCommentsPaginatedInput!
  ): CommentConnection!
  viewerEntriesPaginated(
    viewerEntriesPaginatedInput: FindViewerEntriesPaginatedInput!
  ): EntryConnection!
  viewerFieldsPaginated(
    viewerFieldsPaginatedInput: ViewerFieldsPaginatedInput!
  ): ViewerFieldsPaginatedConnection!
  viewerMediaItemsPaginated(
    viewerMediaItemsPaginatedInput: FindManyMediaItemsPaginatedInput!
  ): MediaItemConnection!
  viewerProfile: Profile!
  viewerSessionsPaginated(
    viewerSessionssPaginatedInput: FindManySessionsPaginatedInput!
  ): SessionConnection!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  MAINTAINER
  SUPERADMIN
  USER
}

type Session implements Node {
  accessToken: String
  alg: String
  exp: Int
  iat: Int
  id: ID!
  lastVerified: DateTime
  provider: String
  refreshToken: String
  scopes: [String!]
  signature: String
  tokenState: String
  user: User
  userId: String
}

type SessionConnection {
  edges: [SessionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SessionCreateManyUserInput {
  accessToken: String
  alg: String
  exp: Int
  iat: Int
  id: String
  lastVerified: DateTime
  provider: String
  refreshToken: String
  scopes: SessionCreateManyscopesInput
  signature: String
  tokenState: String
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateManyscopesInput {
  set: [String!]!
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  accessToken: String
  alg: String
  exp: Int
  iat: Int
  id: String
  lastVerified: DateTime
  provider: String
  refreshToken: String
  scopes: SessionCreatescopesInput
  signature: String
  tokenState: String
}

input SessionCreatescopesInput {
  set: [String!]!
}

type SessionEdge {
  cursor: String!
  node: Session!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SessionOrderByRelevanceFieldEnum {
  accessToken
  alg
  id
  provider
  refreshToken
  scopes
  signature
  tokenState
  userId
}

input SessionOrderByRelevanceInput {
  fields: [SessionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SessionOrderByWithRelationAndSearchRelevanceInput {
  _relevance: SessionOrderByRelevanceInput
  accessToken: SortOrder
  alg: SortOrder
  exp: SortOrder
  iat: SortOrder
  id: SortOrder
  lastVerified: SortOrder
  provider: SortOrder
  refreshToken: SortOrder
  scopes: SortOrder
  signature: SortOrder
  tokenState: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  accessToken
  alg
  exp
  iat
  id
  lastVerified
  provider
  refreshToken
  scopes
  signature
  tokenState
  userId
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  accessToken: StringNullableFilter
  alg: StringNullableFilter
  exp: IntNullableFilter
  iat: IntNullableFilter
  id: StringFilter
  lastVerified: DateTimeNullableFilter
  provider: StringNullableFilter
  refreshToken: StringNullableFilter
  scopes: StringNullableListFilter
  signature: StringNullableFilter
  tokenState: StringNullableFilter
  user: UserRelationFilter
  userId: StringNullableFilter
}

input SessionWhereUniqueInput {
  id: String
}

input SignupInput {
  email: String!
  firstName: String
  image: String
  lastName: String
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  commentCreated: Comment!
  entryCreated: Entry!
  profileCreated: Profile!
}

union TypesUnion = Entry | MediaItem | User

type User implements Node {
  _count: UserCount!
  accounts: [Account!]
  categories: [Category!]
  comments: [Comment!]
  connections: [Connection!]

  """
  Identifies the date and time when the user was created.
  """
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  entries: [Entry!]
  firstName: String
  id: ID!
  image: String
  lastName: String
  mediaItems: [MediaItem!]
  password: String!
  profile: Profile
  role: Role
  sessions: [Session!]
  status: UserStatus!

  """
  Identifies the date and time when the user was last updated.
  """
  updatedAt: DateTime
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserCount {
  accounts: Int!
  categories: Int!
  comments: Int!
  connections: Int!
  entries: Int!
  mediaItems: Int!
  sessions: Int!
}

input UserCreateNestedOneWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCategoriesInput
  create: UserCreateWithoutCategoriesInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutEntriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEntriesInput
  create: UserCreateWithoutEntriesInput
}

input UserCreateOrConnectWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutEntriesInput {
  create: UserCreateWithoutEntriesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCategoriesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  connections: ConnectionCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  entries: EntryCreateNestedManyWithoutAuthorInput
  firstName: String
  id: String
  image: String
  lastName: String
  mediaItems: MediaItemCreateNestedManyWithoutUserInput
  password: String
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  status: UserStatus
  updatedAt: DateTime
}

input UserCreateWithoutCommentsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  connections: ConnectionCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  entries: EntryCreateNestedManyWithoutAuthorInput
  firstName: String
  id: String
  image: String
  lastName: String
  mediaItems: MediaItemCreateNestedManyWithoutUserInput
  password: String
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  status: UserStatus
  updatedAt: DateTime
}

input UserCreateWithoutEntriesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  categories: CategoryCreateNestedManyWithoutCreatorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  connections: ConnectionCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  emailVerified: DateTime
  firstName: String
  id: String
  image: String
  lastName: String
  mediaItems: MediaItemCreateNestedManyWithoutUserInput
  password: String
  profile: ProfileCreateNestedOneWithoutUserInput
  role: Role
  sessions: SessionCreateNestedManyWithoutUserInput
  status: UserStatus
  updatedAt: DateTime
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByRelevanceFieldEnum {
  email
  firstName
  id
  image
  lastName
  password
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: UserOrderByRelevanceInput
  accounts: AccountOrderByRelationAggregateInput
  categories: CategoryOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  connections: ConnectionOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  entries: EntryOrderByRelationAggregateInput
  firstName: SortOrder
  id: SortOrder
  image: SortOrder
  lastName: SortOrder
  mediaItems: MediaItemOrderByRelationAggregateInput
  password: SortOrder
  profile: ProfileOrderByWithRelationAndSearchRelevanceInput
  role: SortOrder
  sessions: SessionOrderByRelationAggregateInput
  status: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  firstName
  id
  image
  lastName
  password
  role
  status
  updatedAt
}

enum UserStatus {
  BANNED
  DEACTIVATED
  DELETED
  OFFLINE
  ONLINE
  SUSPENDED
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  categories: CategoryListRelationFilter
  comments: CommentListRelationFilter
  connections: ConnectionListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  entries: EntryListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  lastName: StringNullableFilter
  mediaItems: MediaItemListRelationFilter
  password: StringFilter
  profile: ProfileRelationFilter
  role: EnumRoleNullableFilter
  sessions: SessionListRelationFilter
  status: EnumUserStatusNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type ViewerAuthInfo {
  accessToken: String!
  refreshToken: String!
  viewerJwt: JwtDecoded!
}

type ViewerDetailed implements Node {
  _count: UserCount!
  accessToken: String
  accounts: [Account!]
  categories: [Category!]
  comments: [Comment!]
  connections: [Connection!]

  """
  Identifies the date and time when the user was created.
  """
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  entries: [Entry!]
  firstName: String
  id: ID!
  image: String
  lastName: String
  mediaItems: [MediaItem!]
  password: String!
  profile: Profile
  refreshToken: String
  role: Role
  secret: String
  sessions: [Session!]
  status: UserStatus!

  """
  Identifies the date and time when the user was last updated.
  """
  updatedAt: DateTime
}

input ViewerEntriesWhereInput {
  AND: [ViewerEntriesWhereInput!]
  NOT: [ViewerEntriesWhereInput!]
  OR: [ViewerEntriesWhereInput!]
  categories: CategoryListRelationFilter
  categoryId: StringNullableFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  featuredImage: StringNullableFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
}

type ViewerFieldsPaginated implements Node {
  _count: UserCount!
  commentConnection: CommentConnection!

  """
  Identifies the date and time when the user was created.
  """
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  entryConnection: EntryConnection!
  firstName: String
  id: ID!
  image: String
  lastName: String
  mediaItemConnection: MediaItemConnection!
  password: String!
  profile: Profile
  role: Role
  sessionConnection: SessionConnection!
  status: UserStatus!

  """
  Identifies the date and time when the user was last updated.
  """
  updatedAt: DateTime
}

type ViewerFieldsPaginatedConnection {
  edges: [ViewerFieldsPaginatedEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ViewerFieldsPaginatedEdge {
  cursor: String!
  node: ViewerFieldsPaginated!
}

input ViewerFieldsPaginatedInput {
  connectionInputs: ViewerFieldsSubConnectionInputs!
  params: FindManyUsersPaginatedInput!
}

input ViewerFieldsSubConnectionInputs {
  findManyCommentsInput: FindManyCommentsPaginatedInput
  findManyEntriesInput: FindManyEntriessPaginatedInput
  findManyMediaItemsInput: FindManyMediaItemsPaginatedInput
  findManySessionsInput: FindManySessionsPaginatedInput
}
